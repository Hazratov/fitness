Backend Integrations:

For Exercise activity:
    1.	Create a New Exercise Block
    •	POST /api/exercise/api/exerciseblocks/
    •	Request Body: {
                       "block_name": "Title",
                       "description": "Description",
                       "block_type": "exercise",
                       "exercises": [
                         {
                           "name": "Exercise Name 1",
                           "exercise_time": "00:23:00",
                           "description": "Description",
                           "file": "image.jpg"
                         },
                         {
                           "name": "Exercise Name 2",
                           "exercise_time": "00:23:00",
                           "description": "Description",
                           "file": "image.jpg"
                         }
                       ]
                     }
    • Response: Returns the created block with its ID.

    2.	Upload an Image for the Block
    •	PATCH /api/exercise/api/exerciseblocks/{id}/upload-block-image/
    •	Request Body: {
                        "id": 1,
                        "block_name": (take from the block creation request),
                        "file": "image.jpg"
                      }
    3.	Upload an Image for an Exercise
    •	PATCH /api/exercise/api/exerciseblocks/{id}/upload-exercise-image/{exercise_id}/
    •	Request Body:{
                       "id": 1,
                       "exercise_id": 1,
                       "block_name": (take from the block creation request),
                       "file": "image.jpg"
                     }
    4.	Update an Exercise Block
    •	PATCH /api/exercise/api/exerciseblocks/{id}/
    5.	Get All Exercise Blocks
    •	GET /api/exercise/api/exerciseblocks/
    6.	Delete an Exercise Block
    •	DELETE /api/exercise/api/exerciseblocks/{id}/
    •	Before deletion, ask for user confirmation.
    •	Notify the user whether the deletion was successful.
    5. additinal info:
    block_type is selected when user decides to create a new block.

Meal Creation and Image Upload API Prompt
    Step 1: Create a Meal

    Endpoint: POST /api/food/api/meals/
    Description: This request creates a new meal entry with the required fields.

    Request Body (JSON):
        {
          "meal_type": "breakfast",  // Options: breakfast, lunch, snack, dinner
          "food_name": "Avocado and Egg Sandwich",
          "calories": "1650",
          "water_content": "3000",  // in ml
          "preparation_time": 20,  // in minutes
          "description": "A healthy sandwich with avocado and eggs.",
          "video_url": "https://example.com/video.mp4",
          "steps": [
            {
              "title": "Prepare the Eggs",
              "text": "Boil the eggs until soft or hard as desired. Season with salt and pepper.",
              "step_time": 10,
              "step_number": 1
            },
            {
              "title": "Assemble the Sandwich",
              "text": "Mash the avocado, spread on bread, and add the sliced eggs.",
              "step_time": 5,
              "step_number": 2
            }
          ]
        }
    Response: •	201 Created with the new meal’s ID.

    Step 2: Upload a Meal Image

    Endpoint: PATCH /api/food/api/meals/{id}/upload-photo/
    Description: This request uploads an image for the created meal.

    Request Body (Multipart Form-Data):
        {
            "id": (take from the meal creation request),
          "meal_type": (take from the meal creation request),
          "file": "image.jpg",
          "food_name": (take from the meal creation request)
          "calories": (take from the meal creation request)
          water_content: (take from the meal creation request)
          preparation_time: (take from the meal creation request)
        }

    Step 3: GET All Meals
    Endpoint: GET /api/food/api/meals/
    Description: This request retrieves all the meals available in the database.

    Step 4: Delete a Meal
    Endpoint: DELETE /api/food/api/meals/{id}/
    Description: This request deletes a meal entry based on the provided ID.
    Additional Information:
    •	Before deletion, ask for user confirmation.
    •	Notify the user whether the deletion was successful.

